AWSTemplateFormatVersion: 2010-09-09
Description: >-
  arthur-auth-service

Transform:
- AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs14.x
    Timeout: 30
    MemorySize: 128
    Architectures:
      - x86_64
    Environment:
      Variables:
        GoogleClientId: 628334755553-6fqao8h6co8vl5siembb7fcib4efj358.apps.googleusercontent.com
        GoogleClientSecret: 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
        JWTSecret: SUPERSECRET
        FrontEndRedirectUrl: http://arhur:4000/login/callback
        GoogleSSORedirectUrl: https://oyjf6gqpu0.execute-api.us-east-1.amazonaws.com/dev/auth/sso/verify/google

Resources:
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
  ArthurAPI:
      Type: AWS::Serverless::Api
      Properties:
        Cors:
          AllowHeaders: 
            - '*'
          AllowMethods: 
            - '*'
          AllowOrigin: 
            - '*'
        StageName: dev
        Auth:
          AddDefaultAuthorizerToCorsPreflight: false
          DefaultAuthorizer: JWTCustomAuthorizer
          Authorizers:
            JWTCustomAuthorizer:
              FunctionArn: !GetAtt customAuthorizer.Arn
              Identity:
                Headers:
                  - Authorization
                ValidationExpression: ^[Bb]earer [-0-9a-zA-z\.]*$
                ReauthorizeEvery: 300
  loginSSO:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/login-sso/index.handler
      Role: !GetAtt LambdaIAMRole.Arn
      Description: Endpoint when login with sso is called
      Events:
        Api:
          Type: Api
          Properties:
            Auth:
              Authorizer: NONE
            RestApiId: !Ref ArthurAPI
            Path: /auth/sso
            Method: POST
  verifySSOGoogle:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/verify-sso/google/index.handler
      Role: !GetAtt LambdaIAMRole.Arn
      Description: Endpoint when verify with sso is called
      Events:
        Api:
          Type: Api
          Properties:
            Auth:
              Authorizer: NONE
            RestApiId: !Ref ArthurAPI
            Path: /auth/sso/verify/google
            Method: GET
  profile:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/profile/index.handler
      Role: !GetAtt LambdaIAMRole.Arn
      Description: Endpoint when verify with sso is called
      Events:
        Api:
          Type: Api
          Properties:
            Path: /me
            Method: GET
            RestApiId: !Ref ArthurAPI
  customAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/authorizer/index.handler
      Role: !GetAtt LambdaIAMRole.Arn
      Description: Endpoint when verify with sso is called
  
Outputs:
  ArthurApiWebEndPoint:
    Description: "API Gateway endpoint URL for dev stage"
    Value: !Sub "https://${ArthurAPI}.execute-api.${AWS::Region}.amazonaws.com/dev/"
  ArhturApiRestId:
    Description: 'API Gateway id for other stacks to use'
    Value: !Ref ArthurAPI
    Export:
      Name: ArthurAPI-RestApiId
  ArthurApiRootResourceId:
    Value: !GetAtt ArthurAPI.RootResourceId
    Description: 'API Gateway root resource id for other stacks to use'
    Export:
      Name: ArthurAPI-RootResourceId


